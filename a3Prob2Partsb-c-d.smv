-- Assignment 3, Problem 2, Part b,c, and d 
-- NuSMV implementation of non-reusable barrier
-- a3Prob2Partsb-c-d.smv

MODULE proc(id, inC, lock, N)
VAR
  pc : {w1,w2,                              -- program counter labels for work portion of code
	bc1,bc2,bc3,bc4,bc5};               -- program counter labels for barrier portion of code
ASSIGN
  init(pc) := w1;
  next(pc) := case
		pc=w1 : {bc1};              -- in work 1
		                            -- barrier start
		pc=bc1 & locked : bc1;         -- lock taken; block
		pc=bc1 & !locked : bc2;        -- lock not taken: get lock, execute collect
		pc=bc2 : bc3;                  -- inC++
		pc=bc3 & inC=N : bc4;          -- last process to arrive
		pc=bc3 & !(inC=N) : bc5;       -- not last process to arrive
		pc=bc4 : w2;                   -- release lock; leave barrier and advance to work
        pc=bc5 & inC<N : bc5;          -- not all arrived; wait (release lock, if necessary)
		pc=bc5 & !(inC<N) : w2;        -- all arrived; advance to work
		                            -- barrier end		
		pc=w2 : w2;                 -- in work 2
		TRUE : pc;
	       esac;
  next(inC) := case
		 (pc=bc2) & inC<N : inC+1;
		 TRUE : inC;
	       esac;
  next(lock) := case
		  (pc=bc1) & !locked : id;   -- get lock
		  pc=bc4 : 0;                -- release lock
		  (pc=bc5) & iHoldLock : 0;  -- release lock
		  TRUE : lock;
		esac;
DEFINE
  iHoldLock := lock=id;  -- this process holds lock
  locked := lock>0 & !iHoldLock; -- some other process holds lock
FAIRNESS
  running  -- make sure that process always executes eventually

MODULE main
VAR
  p1 : process proc(1, inC, lock, N);
  p2 : process proc(2, inC, lock, N);
  p3 : process proc(3, inC, lock, N);  -- uncomment for 3 processes 
  inC : 0..numProcs;
  lock : 0..numProcs;
  FROZENVAR N : 0..numProcs;  -- 'FROZENVAR's cannot be changed
ASSIGN
  init(inC) := 0;
  init(lock) := 0;
  init(N) := numProcs;
DEFINE
  numProcs := 3;  -- change to 'numProcs := 3' for 3 processes

-- Part b: complete and uncomment -----------------------------
allInW1 := p1.pc=w1 & p2.pc=w1 & p3.pc=w1;
atLeastOneInW1 := p1.pc=w1 | p2.pc=w1 | p3.pc=w1;
atLeastOneInW2 := p1.pc=w2 | p2.pc=w2 | p3.pc=w2;
p1InB := p1.pc=bc1 | p1.pc=bc2 | p1.pc=bc3 | p1.pc=bc4 | p1.pc=bc5;
p2InB := p2.pc=bc1 | p2.pc=bc2 | p2.pc=bc3 | p2.pc=bc4 | p2.pc=bc5;

-- 'When the program starts, all processes are in work region w1'
SPEC NAME P1 := EF allInW1;
-- <holds or not?>
-- specification EF allInW1  is true

-- 'It is never the case that at least one process is in region w1 and at least one process is in region w2 at the same time'
SPEC NAME P2 := AG !(atLeastOneInW1 & atLeastOneInW2);
-- <holds or not?>
-- specification AG !(atLeastOneInW1 & atLeastOneInW2)  is true

-- 'Along all paths, it is always the case that when process p1 is in w2, then process p2 is either in the barrier or also in w2'
SPEC NAME P3 := AG p1.pc=w2 -> AG (p2InB | p2.pc=w2);
-- <holds or not?>
-- specification (AG p1.pc = w2 -> AG (p2InB | p2.pc = w2))  is true

-- 'It is impossible for both processes to get stuck in the barrier forever', 
-- i.e., 'There is no path along which there exists a state from which there is a path along which processes p1 and p2 are both in the barrier forever'
SPEC NAME P4 := EF !(p1InB & p2InB);
-- <holds or not?>
-- specification EF !(p1InB & p2InB)  is true

-- 'Along all paths, whenever process p1 is in the barrier, it will always eventually be in work region w2'
SPEC NAME P5 := AG (p1InB -> AF p1.pc=w2);
-- <holds or not?>
-- specification AG (p1InB -> AF p1.pc = w2)  is true

-- 'Along all paths, all processes eventually are in work region w2 and then always stay there forever'
SPEC NAME P6 := AG (EF ((p1.pc=w2 -> AG p1.pc=w2) & (p2.pc=w2 -> AG p2.pc=w2) & (p3.pc=w2 -> AG p3.pc=w2)));
-- <holds or not?>
-- specification AG (EF (((p1.pc = w2 -> AG p1.pc = w2) & (p2.pc = w2 -> AG p2.pc = w2)) & (p3.pc = w2 -> AG p3.pc = w2)))  is true


-- Part c: complete -------------------------------------------
-- Which properties does the original Java code violate?
-- specification P6 := AG (EF (p1.pc = w2 & p2.pc = w2))  is false

-- Part d: complete -------------------------------------------
-- Which properties does the modified Java code violate?
-- specification P4 := EF !(p1InB & p2InB)  is false
-- specification P5 := AG (p1InB -> AF p1.pc = w2)  is false
